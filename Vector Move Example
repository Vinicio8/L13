#include <iostream>
#include <vector>

int main() {
    std::vector<int> v1 = {2, 1, 5, 8, 4, 6};
    std::vector<int> v2 = v1;        
    std::vector<int> v3 = std::move(v1); 

    std::cout << "v1 size: " << v1.size() << std::endl;
    std::cout << "v2 size: " << v2.size() << std::endl;
    std::cout << "v3 size: " << v3.size() << std::endl;

    return 0;
}
\\A1:
\\v1 size: 0
\\v2 size: 6
\\v3 size: 6
\\A2:
\\Because the std::move changes the data of the size of the v1 to v3.
\\Since v1 is empty the traditional form to write his size is 0
\\A3:
\\it casts the object (v1) to an rvalue, signaling that the object's resources can be moved rather than copied.
\\A4:
\\The C++ standard guarantees that after a move operation the moved-from object (v1) must still be destructible and assignable.
\\It must not crash when used but its contents are unspecified.
